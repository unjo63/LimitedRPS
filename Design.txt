Design of LimitedRPS

1. What additional properties did you add to your models and why?

    I added fallowing properties to User class. These property is listed by get_user_rankings endpoint:
        winning_rate = ndb.FloatProperty()  # Rate of wining games per all finished games
        win = ndb.IntegerProperty()  # Number of win games
        lose = ndb.IntegerProperty()  # Number of lose games
        draw = ndb.IntegerProperty()  # Number of draw games

    LimitedRPS has 5~9 rounds par one game, so I added following properties to Game class:
        player_1_round_score = ndb.IntegerProperty()  # Number of rounds Player_1 wins in the game.
        player_2_round_score = ndb.IntegerProperty()    # Number of rounds Player_2 wins in the game.
        round = ndb.IntegerProperty()  # Number of played rounds in this game.
        is_active = ndb.BooleanProperty()   # True corresponds to this game is active. False corresponds to this game was finished.
        round_result = ndb.StringProperty()  # Result of this round.

    I also added following properties for record how many card players have:
        player_1_rock = ndb.IntegerProperty()  # Number of Player_1's rock cards
        player_1_paper = ndb.IntegerProperty()  # Number of Player_1's paper cards
        player_1_scissors = ndb.IntegerProperty()  # Number of Player_1's scissors cards
        player_2_rock = ndb.IntegerProperty()  # Number of Player_2's rock cards
        player_2_paper = ndb.IntegerProperty()  # Number of Player_2's paper cards
        player_2_scissors = ndb.IntegerProperty()  # Number of Player_2's scissors cards

    I also added PlayerMove() model, which is recorded player's move plays in every rounds. PlayerMove() contains fallowing properties, which is listed get_round_history() endpoint.
        player_1_move = ndb.StringProperty()  # Player_1's move
        player_2_move = ndb.StringProperty()  # Player_2's move
        round = ndb.IntegerProperty()  # Number of rounds played in the game

    I also added UserScores() model, which is record player's scores in every games.
        The score is the number of winning rounds in one game. get_high_scores endpoint lists the user scores by using UserScores() class.
        But when playing LimitedRPS, this score is meaningless because player will lost some rounds strategically.
        So this function is for the purpose of Task 3: Extend Your API.

2. What were some of the trade-offs or struggles you faced when implementing the new game logic?

    In LimitedRPS players play 5~9 rounds per one game. This API contains play_game() function but play_round() function.
    The play_game() function contains round function. If there is play_round() apart from play_game() function, players
    have to register rounds 5~9 times per a game, this logic cause front end code more complex. So I think play_game()
    contains round function is easier way for implement LimitedRPS game. With this logic, play_game()'s code becomes longer
    and more complex.

